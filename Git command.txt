->    All the content of repository inside the .get directory.

 -> echo "hi my name is naqib ullah"> report.txt
by the above command you can create new file with some contents.


->what is the mean of trak in git.
Git keeps a record of any modifications made to it over time.

1) rm -rf .get
this delete the .get directory.
after deleting the .get directory with the folder/directory then the directory/folder does't called a 
repository.
-> and also rm -rf is a linux command it deletes the file content.


2) go to the github tensor flow repository and copy that url and then paste 
after the git clone command and then press enter then tensor flow git repository will
be recieved to you and then start practice with this repository.

3) git add --a 
all changes place to the staging area ok means file move to the stage area and then commit that file.

4) git show head~1:can be used to look at changes made in a particular commit.
the number you can change with time to time like head~2 and head~3 etc.

5) git diff : compare changes between two commmits.

6) to compare the fourth and third most recent command.
git diff head~4 head~3

7)Suppose we want to see who made the last change to each line of a file, and when the
 change took place. We can use the git annotate command followed by the filename
e.g git annotate first.txt

8) compare current commit with the privious commits 
git diff --staged

9) to unstage a single file to the repo from staging area.
gir reset head file_name

10)Alternatively, if we need to move all files in the staging area back to the repo, 
then we execute git reset HEAD without specifying any filenames.

11) we can restrict the git log history by adding -  symbol.
git log -3
the above command only show the first three recent commits of the git log out command.
git log -3 file_name:-> in this case it only show single file most recent commit ok.

12) git reset head~:
this command undo the commit 

13) git reset head:
remove all file from the staging area .

14) compare the commits axcept the recent commit.
git show head~1 head~2

15)git reset head~
to reset the recent commit for working .

16) git reset head~1
reset the most recent second commit

17) display line by line changes in a file who can change and when 
git annotate report.md

18) which files are untracked in your repo and then remove those files.
a)git clean -n 
b)git clean -f
it is most important to remove all those file in your repository which are nor 
necessary.

19) display the last tow commits for the repository file
git log -2 report.xt

20)create a new branch and move to this new branch.
git checkout -b branch_name

21)to see the hash of the commit and go to a specific hash or commit
a)git log --oneline
b)git checkout hash_code
or 
b)git checkout head~2

22) to switch a particular branch
git switch -c master

23) go to the privious state
git checkout -

24) change the branch
git checkout branch_name

25)use git reset head~1 instead of git checkout hashcode filename.

26)to access git costomizable setting
git config --list
27)to see settings for one specific project
28)settings for all our projects
git config --glbal
29) settings for every user in this computer .
git config --system
30)user.settings and user.email both are the global command.
31)It used to give alias to any command like st is alias of status.
git config --global alias.st status
or git config --global alias.unstage 'reset HEAD '

32)how to create a brach and switch it to.
git checkout -b branch_name

33)to check braches in your repository .
git branch

34)compare the report branch and summary branch.
git diff report summary

35)how to switch a new branch
git checkout branch_name

36)how to merge the braches
git merge source distination
e.g:git merge report main

37) creating a new git repository 
git init repository_name.

38)copy a remote repo in your local computer.
git clone remote_repo_link

or

39)git remote add give_name link_repo

40) git remote -v
give us the two link one is for push and other one is full. 

41)all the git commmands available at the bellow link
https://www.datacamp.com/cheat-sheet/git-cheat-sheet





42)push the project to the github.com.
git push remote_name branch_name
e.g->git push naqib master